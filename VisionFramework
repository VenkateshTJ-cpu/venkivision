using System;
using System.Drawing;
using System.Reflection.Metadata.Ecma335;
using AVFoundation;
using CoreAnimation;
using CoreFoundation;
using CoreMedia;
using CoreVideo;
using MapKit;
using Microsoft.VisualBasic;
using UIKit;
using Vision;
using VisionBarcodeiOS;

public class VisionScannerController : UIViewController//, IAVCaptureVideoDataOutputSampleBufferDelegate
{
    private readonly AVCaptureSession captureSession = new AVCaptureSession();
    private readonly AVCaptureVideoPreviewLayer previewLayer;
    private readonly AVCaptureVideoDataOutput videoOutput = new AVCaptureVideoDataOutput();
    private readonly VNSequenceRequestHandler sequenceHandler = new VNSequenceRequestHandler();
    public event BarcodeResult OnScanResult;
    public delegate void BarcodeResult(BarcodeResultEventArgs e);

    public int RequestCode { get; set; } = 1;
    UIView line, topView, bottomView, buttonsView;
    UIButton cancelButton, flashButton;

    public VisionScannerController(Object CallingObject)
    {
        previewLayer = new AVCaptureVideoPreviewLayer(captureSession)
        {
            VideoGravity = AVLayerVideoGravity.ResizeAspectFill
        };
        if (CallingObject is FirstViewController)
        {
            var vc = CallingObject as FirstViewController;
            this.OnScanResult -= vc.OnScanResult;
            this.OnScanResult += vc.OnScanResult;
        }

    }

    public override void ViewDidLoad()
    {
        base.ViewDidLoad();
        AddCameraInput();
        AddPreviewLayer();
        //AddVideoOutput();
        AddMetaOutPut();
        AddOverLay();
        captureSession.StartRunning();

    }

    public override void ViewDidLayoutSubviews()
    {
        base.ViewDidLayoutSubviews();
        previewLayer.Frame = View.Bounds;
    }


    private void AddOverLay()
    {
        NavigationController.NavigationBar.Hidden = true;
        View.InsetsLayoutMarginsFromSafeArea = false;

        line = new UIView() { Frame = new CGRect(0, ((View.Frame.Height - (View.Frame.Height/10))/2)-2, View.Frame.Width, 2), BackgroundColor = UIColor.Red };
        topView = new UIView() { Frame = new CGRect(0, 0, View.Frame.Width, 150), BackgroundColor = UIColor.Gray, Alpha = 0.5f };
        bottomView = new UIView() { Frame = new CGRect(0, View.Frame.Height - (View.Frame.Height/10)-150, View.Frame.Width, 150), BackgroundColor = UIColor.Gray, Alpha = 0.5f };
        buttonsView = new UIView() { Frame = new CGRect(0, View.Frame.Height - 80, View.Frame.Width, View.Frame.Height/10), BackgroundColor = UIColor.White, Alpha = 1 };
        cancelButton = new UIButton() { Frame = new CGRect(10, 10, 120, buttonsView.Frame.Height-20) };
        cancelButton.SetTitle("Cancel", UIControlState.Normal);
        cancelButton.SetTitleColor(UIColor.Black, UIControlState.Normal);
        flashButton = new UIButton() { Frame = new CGRect(buttonsView.Frame.Width - 130, cancelButton.Frame.Y, 120, cancelButton.Frame.Height) };
        flashButton.SetTitle("Flash", UIControlState.Normal);
        flashButton.SetTitleColor(UIColor.Black, UIControlState.Normal);
    
        buttonsView.AddSubviews(cancelButton, flashButton);
        View.AddSubviews(topView, line, bottomView, buttonsView);

        cancelButton.TouchUpInside += (sender, e) =>
        {
            captureSession.StopRunning();
            this.NavigationController.PopViewController(false);
        };
    flashButton.TouchUpInside += (sender, e) =>
        {
            var device = AVCaptureDevice.GetDefaultDevice(AVMediaTypes.Video);
            var error = new NSError();
            if (device.HasTorch)
            {
                if (device.TorchMode == AVCaptureTorchMode.On)
                {
                    device.LockForConfiguration(out error);
                    device.TorchMode = AVCaptureTorchMode.Off;
                    device.UnlockForConfiguration();

                }
                else
                {
                    device.LockForConfiguration(out error);
                    device.TorchMode = AVCaptureTorchMode.On;
                    device.UnlockForConfiguration();

                }
            }
        };
      
    }

    private void ExtractVisionBarode(CVImageBuffer frame)
    {
        var barcodeRequest = new VNDetectBarcodesRequest((result, error) => { });


        barcodeRequest.Symbologies = new[] { VNBarcodeSymbology.QR, VNBarcodeSymbology.Code39 };
        NSError error;
        try
        {
            sequenceHandler.Perform(new[] { barcodeRequest }, (CVPixelBuffer)frame, out error);
            if (barcodeRequest.Results == null || !barcodeRequest.Results.Any())
                return;

            var result = barcodeRequest?.Results.First().PayloadStringValue?.ToString();
            OnScanResult?.Invoke(new BarcodeResultEventArgs() { barcodeValue = result, barcodeFormat = barcodeRequest.Results.First().Symbology.ToString(), requestCode = this.RequestCode });
            this.NavigationController?.PopViewController(true);
            captureSession.StopRunning();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private void ExtractMetaBarcode(AVMetadataMachineReadableCodeObject frame)
    {

        try
        {

            if (frame == null || String.IsNullOrEmpty(frame.StringValue))
                return;

            var result = frame.StringValue;
            var type = frame.Type;
            OnScanResult?.Invoke(new BarcodeResultEventArgs() { barcodeValue = result, barcodeFormat = type.ToString(), requestCode = this.RequestCode });
            this.NavigationController?.PopViewController(true);
            captureSession.StopRunning();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    private void AddCameraInput()
    {
        var device = AVCaptureDevice.GetDefaultDevice(AVMediaTypes.Video);
        ConfigureCameraForDevice(device);
        var cameraInput = AVCaptureDeviceInput.FromDevice(device);
        captureSession.AddInput(cameraInput);
      
    }

    private void AddPreviewLayer()
    {
        View.Layer.AddSublayer(previewLayer);
        //   View.AddSubview(resultLabel);

    }

    private void AddVideoOutput()
    {
        var videoSettingsDict = new NSMutableDictionary();
        videoSettingsDict.Add(CVPixelBuffer.PixelFormatTypeKey, NSNumber.FromUInt32((uint)CVPixelFormatType.CV32BGRA));
        videoOutput.WeakVideoSettings = videoSettingsDict;
        videoOutput.SetSampleBufferDelegate(new MyVideoOutputDelegate(this), DispatchQueue.MainQueue);
        captureSession.AddOutput(videoOutput);
    }

    private void AddMetaOutPut()
    {

        var metadataOutput = new AVCaptureMetadataOutput();
        var metadataDelegate = new MyMetadataOutputDelegate(this);
        metadataOutput.SetDelegate(metadataDelegate, DispatchQueue.MainQueue);
        captureSession.AddOutput(metadataOutput);
        metadataOutput.MetadataObjectTypes = AVMetadataObjectType.QRCode | AVMetadataObjectType.EAN13Code;

    }
    void ConfigureCameraForDevice(AVCaptureDevice device)
    {
        var error = new NSError();
        if (device.IsFocusModeSupported(AVCaptureFocusMode.ContinuousAutoFocus))
        {
            device.LockForConfiguration(out error);
            device.FocusMode = AVCaptureFocusMode.ContinuousAutoFocus;
            device.UnlockForConfiguration();
        }
        else if (device.IsExposureModeSupported(AVCaptureExposureMode.ContinuousAutoExposure))
        {
            device.LockForConfiguration(out error);
            device.ExposureMode = AVCaptureExposureMode.ContinuousAutoExposure;
            device.UnlockForConfiguration();
        }
        else if (device.IsWhiteBalanceModeSupported(AVCaptureWhiteBalanceMode.ContinuousAutoWhiteBalance))
        {
            device.LockForConfiguration(out error);
            device.WhiteBalanceMode = AVCaptureWhiteBalanceMode.ContinuousAutoWhiteBalance;
            device.UnlockForConfiguration();
        }
    }


    public class MyMetadataOutputDelegate : AVCaptureMetadataOutputObjectsDelegate
    {
        VisionScannerController visionScannerController;
        public MyMetadataOutputDelegate(VisionScannerController visionScannerController)
        {
            this.visionScannerController = visionScannerController;
        }
        public override void DidOutputMetadataObjects(AVCaptureMetadataOutput captureOutput, AVMetadataObject[] metadataObjects, AVCaptureConnection connection)
        {
            foreach (var m in metadataObjects)
            {
                if (m is AVMetadataMachineReadableCodeObject)
                {
                    var frame = m as AVMetadataMachineReadableCodeObject;
                    this.visionScannerController.ExtractMetaBarcode(frame);

                    // MetadataFound(this, m as AVMetadataMachineReadableCodeObject);
                }
            }
        }

        // public event EventHandler<AVMetadataMachineReadableCodeObject> MetadataFound = delegate { };
    }

    public class MyVideoOutputDelegate : AVCaptureVideoDataOutputSampleBufferDelegate
    {
        VisionScannerController visionScannerController;
        public MyVideoOutputDelegate(VisionScannerController visionScannerController)
        {
            this.visionScannerController = visionScannerController;
        }
        public override void DidOutputSampleBuffer(AVCaptureOutput output, CMSampleBuffer sampleBuffer, AVCaptureConnection connection)
        {
            var frame = sampleBuffer.GetImageBuffer();
            if (frame == null)
            {
                Console.WriteLine("unable to get image from sample buffer");
                return;
            }
            visionScannerController.ExtractVisionBarode(frame);

        }




    }


}


public class BarcodeResultEventArgs : EventArgs
{
    public string barcodeValue;
    public string barcodeFormat;

    public int requestCode;
}
